version: '3.7'

x-default-opts: 
  &default-opts
  logging:
    options:
      max-size: "10m" 

networks:
  ntw_front:
    external: true
  ntw_proxy:
    external: true

configs:
  traefik.toml:
    file: ./configs/traefik.toml

services:

  # this custom haproxy allows us to move traefik to worker nodes
  # while this container listens on managers and only allows
  # traefik to connect, read-only, to limited docker api calls
  # https://github.com/Tecnativa/docker-socket-proxy
  proxysocket:
    <<: *default-opts
    image: devmtl/proxysocket:1.9.9
    networks:
      - ntw_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      NETWORKS: 1
      SERVICES: 1
      TASKS: 1
      # CONTAINERS: 1
      # SWARM: 1
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.20'
          memory: 8M
        reservations:
          cpus: '0.10'
          memory: 4M

  # this traefik reverse proxy has a bunch of features:
  # - reverse proxy all 80/443 ingress traffic on a swarm
  # - dynamic config via each app's swarm service labels
  # - HA multi-container design for traefik
  # - runs traefik on host NIC directly, to improve performance
  #    and capture client IP's
  traefik:
    <<: *default-opts
    image: traefik:1.7.28
    ports:
    - target: 80
      protocol: tcp
      published: 80
      mode: ingress
    - target: 443
      protocol: tcp
      published: 443
      mode: ingress
    - target: 8080
      protocol: tcp
      published: 8080
      mode: ingress
    networks:
      - ntw_front
      - ntw_proxy
    volumes:
      - ./configs/acme.json:/acme.json
    configs:
      - source: traefik.toml
        target: /etc/traefik/traefik.toml
    command: >
      --docker
      --docker.watch
      --docker.swarmmode
      --docker.exposedbydefault=false \
      --docker.swarmModeRefreshSeconds=5
      --docker.domain=traefik
      --docker.endpoint=tcp://proxysocket:2375
      --debug=true
      --logLevel=WARN
      --accessLog
      --web.metrics.prometheus
      --web.metrics.prometheus.buckets="0.1,0.3,1.2,5.0"
      --web.address=:8080
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        delay: 2s
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
        max_attempts: 5
      resources:
        limits:
          cpus: '0.33'
          memory: 96M
        reservations:
          cpus: '0.05'
          memory: 48M
      labels:
        - "traefik.backend=traefik"
        - "traefik.enable=true"
        - "traefik.port=8080"

# https://github.com/pascalandy/docker-stack-this
# inspired by https://github.com/BretFisher/dogvscat
